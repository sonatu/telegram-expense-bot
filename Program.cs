using System.Text.Json;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
var botToken = Environment.GetEnvironmentVariable("TOKEN");
if (string.IsNullOrEmpty(botToken))
{
    Console.WriteLine("‚ùå TOKEN not found in environment variables!");
    return;
}

var bot = new TelegramBotClient(botToken);

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const string DataFile = "expenses.json";

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ç
var expenses = new Dictionary<string, ExpenseData>();

if (System.IO.File.Exists(DataFile))
{
    try
    {
        var json = System.IO.File.ReadAllText(DataFile);
        var loaded = JsonSerializer.Deserialize<Dictionary<string, ExpenseData>>(json);
        if (loaded != null)
            expenses = loaded;
    }
    catch
    {
        Console.WriteLine("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.");
    }
}

void SaveData()
{
    var json = JsonSerializer.Serialize(expenses, new JsonSerializerOptions { WriteIndented = true });
    System.IO.File.WriteAllText(DataFile, json);
}

string GetMonthKey() => $"{DateTime.Now:yyyy-MM}";

string GetChatKey(long chatId) => $"{GetMonthKey()}_{chatId}";

decimal AddExpense(decimal amount, long chatId)
{
    var key = GetChatKey(chatId);
    if (!expenses.ContainsKey(key))
        expenses[key] = new ExpenseData();

    expenses[key].Items.Add(amount);
    expenses[key].Total = Math.Round(expenses[key].Items.Sum(), 2);
    SaveData();
    return expenses[key].Total;
}

(bool success, decimal last, decimal total) UndoLast(long chatId)
{
    var key = GetChatKey(chatId);
    if (!expenses.ContainsKey(key) || expenses[key].Items.Count == 0)
        return (false, 0, 0);

    var last = expenses[key].Items.Last();
    expenses[key].Items.RemoveAt(expenses[key].Items.Count - 1);
    expenses[key].Total = Math.Round(expenses[key].Items.Sum(), 2);
    SaveData();
    return (true, last, expenses[key].Total);
}

// –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.MapPost("/webhook", async (Update update) =>
{
    if (update.Type != UpdateType.Message || update.Message == null)
        return Results.Ok();

    var message = update.Message;
    var chatId = message.Chat.Id;
    var text = message.Text?.Trim();

    if (string.IsNullOrEmpty(text))
        return Results.Ok();

    if (text.StartsWith("/start"))
    {
        await bot.SendMessage(chatId,
            "–ü—Ä–∏–≤–µ—Ç! üí∞ –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é, —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n" +
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å /undo");
    }
    else if (text.StartsWith("/undo") || text.StartsWith("/–æ—Ç–º–µ–Ω–∞"))
    {
        var result = UndoLast(chatId);
        if (!result.success)
        {
            await bot.SendMessage(chatId, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã üòÖ");
        }
        else
        {
            var monthName = DateTime.Now.ToString("MMMM");
            await bot.SendMessage(chatId, $"–û—Ç–º–µ–Ω–µ–Ω–æ: {result.last:F2} ‚Ç¨. –¢–µ–ø–µ—Ä—å –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ {monthName}: {result.total:F2} ‚Ç¨");
        }
    }
    else
    {
        if (decimal.TryParse(text.Replace(",", "."), out var amount))
        {
            var total = AddExpense(amount, chatId);
            var monthName = DateTime.Now.ToString("MMMM");
            await bot.SendMessage(chatId, $"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ {monthName}: {total:F2} ‚Ç¨");
        }
        else
        {
            await bot.SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5");
        }
    }

    return Results.Ok();
});

// –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
app.MapGet("/", () => "‚úÖ Telegram Expense Bot is running!");

// –ó–∞–ø—É—Å–∫
var port = Environment.GetEnvironmentVariable("PORT") ?? "10000";
Console.WriteLine($"üöÄ Starting server on port {port}");
app.Run($"http://0.0.0.0:{port}");

// –ú–æ–¥–µ–ª—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
public class ExpenseData
{
    public List<decimal> Items { get; set; } = new();
    public decimal Total { get; set; }
}
