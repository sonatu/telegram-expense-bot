using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

class Program
{
    static string DataFile = "expenses.json";
    static JsonDocument Expenses;
    static TelegramBotClient Bot;

    static async Task Main()
    {
        var token = Environment.GetEnvironmentVariable("TOKEN");
        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã");
            return;
        }

        Bot = new TelegramBotClient(token);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (File.Exists(DataFile))
        {
            var json = await File.ReadAllTextAsync(DataFile);
            Expenses = JsonDocument.Parse(json);
        }

        var me = await Bot.GetMeAsync();
        Console.WriteLine($"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.Username}");

        Bot.StartReceiving(HandleUpdateAsync, HandleErrorAsync);

        Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
        Console.ReadKey();
    }

    static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, System.Threading.CancellationToken token)
    {
        if (update.Type != UpdateType.Message || update.Message!.Type != MessageType.Text)
            return;

        var chatId = update.Message.Chat.Id;
        var text = update.Message.Text.Trim();

        if (text == "/start")
        {
            await botClient.SendTextMessageAsync(chatId,
                "–ü—Ä–∏–≤–µ—Ç! üí∞ –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏, –∞ —è –ø–æ—Å—á–∏—Ç–∞—é, —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n" +
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å /–æ—Ç–º–µ–Ω–∞ –∏–ª–∏ /undo");
            return;
        }

        if (text == "/–æ—Ç–º–µ–Ω–∞" || text == "/undo")
        {
            await botClient.SendTextMessageAsync(chatId, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞");
            return;
        }

        if (decimal.TryParse(text.Replace(",", "."), out var amount))
        {
            await botClient.SendTextMessageAsync(chatId, $"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount:F2} ‚Ç¨");
            return;
        }

        await botClient.SendTextMessageAsync(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5");
    }

    static Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, System.Threading.CancellationToken token)
    {
        Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
        return Task.CompletedTask;
    }
}
